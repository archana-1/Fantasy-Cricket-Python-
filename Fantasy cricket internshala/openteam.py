# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'openteam.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import database as db
import fantasy_cricket as main_w
import json

class openTeamWindow(object):

    def setupUi(self, MainWindow, m_obj):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(434, 275)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(99, 0, 231, 231))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.select_tm = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.select_tm.setEditable(False)
        self.select_tm.setObjectName("select_tm")
        self.verticalLayout.addWidget(self.select_tm)
        self.ok_btn = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ok_btn.setObjectName("ok_btn")
        self.verticalLayout.addWidget(self.ok_btn)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 434, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # ok button connect
        self.ok_btn.clicked.connect(self.ok_action)
        teams = db.getteams()
        # print(list)
        for t in teams:
            self.select_tm.addItem(t[1])

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # store the window
        self.window = MainWindow
        # store main class object
        self.m_obj = m_obj

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Open Team"))
        self.ok_btn.setText(_translate("MainWindow", "Ok"))

    def ok_action(self):
        # taking the text selected from the drop down
        team = self.select_tm.currentText()
        # main_w.display_team(team)
        if team != None:
            self.m_obj.team_name.setText(team)
            
            # team players abd points used concept
            teaminfo = db.getteamdetails(team)
            if teaminfo:
                # team id of the team selected and team value
                self.m_obj.tm_sltd = int(teaminfo[0])
                self.m_obj.team_val = teaminfo[3]
                
                #teaminfo[3] is team value
                if self.m_obj.team_val:
                    self.m_obj.pt_used.setText(str(self.m_obj.team_val)) 
                    self.m_obj.avl_val = 1000
                    if self.m_obj.avl_val -self.m_obj.team_val> 0:                 
                        val= self.m_obj.avl_val -self.m_obj.team_val
                    
                        self.m_obj.avl_val = val                
                    self.m_obj.pt_avl.setText(str(self.m_obj.avl_val))    
                    # show team players in the list 
                    players_id = json.loads(teaminfo[2])
                    # print(players_id)
                    players = db.get_players_by_id(players_id)
                    self.m_obj.team_players.clear()
                    # refresh count
                    self.m_obj.count_players(None)
                    # print('here openteam')
                    # print(players)
                                      
                    
                    for p in players:
                        item = QtWidgets.QListWidgetItem(p[1])
                        val = str(p[0])+'_'+p[2]+'_'+str(p[3])
                        item.setData(QtCore.Qt.UserRole,val)  # Set ID 14_BAT_120
                        self.m_obj.count_players(p[2])
                        self.m_obj.team_players.addItem(item)
                                  
                else:
                    # self.m_obj.pt_used.setText('0')
                    # self.m_obj.pt_avl.setText('1000')
                    self.m_obj.team_val = 0
                    self.m_obj.avl_val = 1000
                    self.m_obj.pt_used.setText(str(self.m_obj.team_val))
                    self.m_obj.pt_avl.setText(str(self.m_obj.avl_val)) 
                    self.m_obj.team_players.clear()
                    #refresh the count
                    self.m_obj.count_players(None)

                self.m_obj.bat.setAutoExclusive(False)
                self.m_obj.bat.setChecked(False)  
                self.m_obj.bat.setAutoExclusive(True) 
                self.m_obj.bat.click()
            self.window.close()



        

# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = openTeamWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
