# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'evaluateteam.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import database as db
import json
import pywhatkit as pyw

class evaluateTeamWindow(object):
    def __init__(self):
        super().__init__()
        self.total_pts = 0
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.team_list = QtWidgets.QComboBox(self.centralwidget)
        self.team_list.setObjectName("team_list")
        # preparing team drop down list
        teams = db.getteams()
        # print(list)
        for t in teams:
            self.team_list.addItem(t[1])
        # ends

        self.horizontalLayout.addWidget(self.team_list)
        spacerItem = QtWidgets.QSpacerItem(60, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.match_list = QtWidgets.QComboBox(self.centralwidget)
        self.match_list.setObjectName("match_list")
        # preparing team drop down list
        matches = db.getmatches()
        # print(list)
        for m in matches:
            self.match_list.addItem(m[1])
        # ends
        self.horizontalLayout.addWidget(self.match_list)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.line = QtWidgets.QFrame(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.line.setFont(font)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_2.addWidget(self.label_4)
        self.team_score = QtWidgets.QLabel(self.centralwidget)
        self.team_score.setObjectName("team_score")
        self.horizontalLayout_2.addWidget(self.team_score)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.t_player_list = QtWidgets.QListWidget(self.centralwidget)
        self.t_player_list.setObjectName("t_player_list")
        self.horizontalLayout_3.addWidget(self.t_player_list)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.score_list = QtWidgets.QListWidget(self.centralwidget)
        self.score_list.setObjectName("score_list")
        self.horizontalLayout_3.addWidget(self.score_list)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.finalize_btn = QtWidgets.QPushButton(self.centralwidget)
        self.finalize_btn.setObjectName("finalize_btn")
        self.horizontalLayout_4.addWidget(self.finalize_btn)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem4)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # connect events
        self.team_list.activated.connect(self.evaluate_score)
        self.match_list.activated.connect(self.evaluate_score)
        self.finalize_btn.clicked.connect(self.sendmsg)
        # ends


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    # send whatsapp message
    def sendmsg(self):
        if self.team_list.currentText() and self.match_list.currentText() and self.total_pts > 0:
            phone_number = "+918085682007"  # Include country code
            message = "Your team "+str(self.team_list.currentText())+" has won with "+str(self.total_pts)+" points in match "+str(self.match_list.currentText())
            try: 
                pyw.sendwhatmsg_instantly(phone_number, message)
            except Exception as e:
                print(e)

    # evaluate score method
    def evaluate_score(self):
        if(self.team_list.currentText() and self.match_list.currentText()):
            
            t_name = self.team_list.currentText()
            m_name = self.match_list.currentText()
            # print(t_name, m_name)
            #  get m_id in a tuple
            m_id  = db.getmatches(str(m_name))
            # print(m_id)
            result = db.getteamdetails(t_name, m_id[0])
            # print(result)
            if result:
                t_players = json.loads(result[0])
                # print(t_players)
                players = db.get_players_by_id(t_players)

                # refresh the points, lists
                points = 0
                self.total_pts = 0
                self.t_player_list.clear()
                self.score_list.clear()

                for p in players:
                    #(11, 'Umesh', 'WK', 110)
                    self.t_player_list.addItem(p[1])
                    p_stats = db.get_player_stats(p[0], m_id[0])
                    
                    # calculate the points for player
                    points = self.compute_batscore(p_stats)
                    # print(points)
                    self.total_pts += points
                    self.score_list.addItem(str(points))
                self.team_score.setText(str(round(self.total_pts, 2)))

            

    #  compute points for each player
    def compute_batscore(self, p):
        if p:
            points = 0
            # print(p)
            #runs
            points += p['scored']/2
            #century
            points += (p['scored']/50) * 5
            #strike rate
            if p['faced'] >0:
                strike = p['scored']/ p['faced']
                if strike > 80 and strike < 100:
                    points +=2
            # each wkts
            points += p['wkts']*10
            #each catchouts, stumping
            points += p['catches']*10
            points += p['stumping']*10

            return(points)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Evaluate the performance of your Fantasy team"))
        self.label_2.setText(_translate("MainWindow", "Team Players"))
        self.label_4.setText(_translate("MainWindow", "Team Score : "))
        self.team_score.setText(_translate("MainWindow", "0"))
        self.finalize_btn.setText(_translate("MainWindow", "Finalize"))


# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = evaluateTeamWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
